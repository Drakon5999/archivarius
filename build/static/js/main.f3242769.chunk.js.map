{"version":3,"sources":["components/Header/index.jsx","components/Footer/index.jsx","rest.js","components/Upload/Upload.jsx","components/Modules/ClassesSelect.jsx","components/View/index.jsx","components/Modules/ResultsTable.jsx","components/Search/index.jsx","components/Upload/UploadResult.jsx","components/Main/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["withRouter","props","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","Form","inline","method","action","FormControl","type","name","placeholder","Button","variant","Footer","server","APIRequest","data","a","contentType","axios","post","headers","response","console","log","status","Upload","state","handleChange","bind","onUpload","event","target","this","setState","value","files","e","ths","preventDefault","formData","FormData","append","file","then","result","history","push","upload_id","onSubmit","File","label","onChange","React","Component","ClassesSelect","Group","as","Row","controlId","Label","column","sm","Col","Control","classes","map","object","i","View","docId","useParams","useState","setData","process_status","setTimeout","doc_src_name","doc_cls","number","organization","style","src","ResultTable","Table","striped","bordered","hover","size","val","to","doc_id","Search","setResult","query","URLSearchParams","useLocation","search","get","uploadId","Main","setClasses","length","tmp","cls","hasOwnProperty","exact","path","children","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f3242769.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {Button, Form, FormControl, Nav, Navbar, NavDropdown} from \"react-bootstrap\";\n\nfunction Header(props) {\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"/\">Архивариус</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/search\">Поиск</Nav.Link>\n          <Nav.Link href=\"/upload\">Загрузка</Nav.Link>\n          <NavDropdown title=\"Отчёты\" id=\"basic-nav-dropdown\">\n            <NavDropdown.Item href=\"/stats/system\">Систестема</NavDropdown.Item>\n            <NavDropdown.Item href=\"/stats/bi\">BI</NavDropdown.Item>\n          </NavDropdown>\n        </Nav>\n        <Form inline method={\"GET\"} action={\"/search\"} >\n          <FormControl type=\"text\" name={'text'} placeholder=\"Поиск по тексту\" className=\"mr-sm-2\" />\n          <Button type={\"submit\"} variant=\"outline-success\">Искать</Button>\n        </Form>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default withRouter(Header);\n","import React from 'react';\n\nconst Footer = () => (\n  <div> </div>\n);\n\nexport default Footer;\n","import axios from 'axios'\r\n\r\nlet server = 'http://178.154.225.145:5000'\r\n\r\nexport default async function APIRequest(method, data, contentType = 'application/json') {\r\n  let response;\r\n  try {\r\n    response = await axios.post(\r\n      server + '/api/' + method,\r\n      data,\r\n      { headers: { 'Content-Type': contentType} }\r\n    );\r\n    console.log(response)\r\n    response.data.status = (response.data && response.data.status) || 'ok';\r\n  } catch (err) {\r\n    console.log(err);\r\n    return {status: 'error'};\r\n  }\r\n\r\n  console.log(response.data);\r\n  return response.data;\r\n}\r\n","import React from 'react';\r\nimport {Button, Col, Form, FormControl, Nav, Navbar, NavDropdown, Row, Table} from \"react-bootstrap\";\r\nimport APIRequest from \"../../rest\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass Upload extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.onUpload = this.onUpload.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    console.log(target);\r\n    if (name !== 'file') {\r\n      this.setState({\r\n        [name]: target.value\r\n      });\r\n    } else {\r\n      this.setState({\r\n        [name]: target.files[0]\r\n      });\r\n    }\r\n  }\r\n\r\n  onUpload(e) {\r\n    let ths = this;\r\n    e.preventDefault();\r\n    var formData = new FormData();\r\n    formData.append(\"file\", this.state.file);\r\n    APIRequest('upload', formData, \"multipart/form-data\").then(function (result) {\r\n      console.log(result);\r\n      if (result.status === 'ok') {\r\n        ths.props.history.push('/upload/'+ result.upload_id);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className={\"mt-3\"}>Загрузка файла</h1>\r\n        <Form type={\"POST\"} onSubmit={this.onUpload}>\r\n          <Form.File\r\n            id=\"custom-file\"\r\n            label=\"Выберете pdf документ или zip-архив с pdf документами\"\r\n            name={\"file\"}\r\n            onChange={this.handleChange}\r\n          />\r\n          <Button className={\"mt-3\"} type={\"submit\"} variant=\"outline-success\">Загрузить</Button>\r\n        </Form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default withRouter(Upload);","import React from 'react';\r\nimport {useLocation} from \"react-router-dom\";\r\nimport {Button, Col, Form, FormControl, Nav, Navbar, NavDropdown, Row, Table} from \"react-bootstrap\";\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\nlet ClassesSelect = function (props) {\r\n  console.log(props)\r\n  return (\r\n    <Form.Group  as={Row} controlId=\"exampleForm.ControlSelect1\">\r\n      <Form.Label column sm=\"2\">Класс документа</Form.Label>\r\n      <Col sm=\"10\">\r\n        <Form.Control onChange={props.handleChange}  as=\"select\" name={'doc_cls'} value={props.type}>\r\n          <option value={\"undefined\"}>Любой</option>\r\n            {props.classes.map(function(object, i){\r\n              return <option value={object}>{object}</option>;\r\n            })}\r\n        </Form.Control>\r\n      </Col>\r\n    </Form.Group>\r\n  )\r\n\r\n}\r\n\r\nexport default ClassesSelect;","import React, {useState} from 'react';\r\nimport {\r\n  useParams\r\n} from \"react-router-dom\";\r\nimport {Button, Col, Form, Row} from \"react-bootstrap\";\r\nimport APIRequest from \"../../rest\";\r\nimport ClassesSelect from \"../Modules/ClassesSelect\";\r\n\r\nlet View = function(props) {\r\n    let { docId } = useParams();\r\n    const [data, setData] = useState({})\r\n    let intervalUpdate = function() {\r\n      APIRequest('view/'+docId, {}, '', ).then(\r\n        function (result) {\r\n          setData(result);\r\n        }\r\n      )\r\n    }\r\n\r\n    if (data.process_status !== 'failed' && data.process_status !== 'complete') {\r\n      setTimeout(intervalUpdate, 2000);//wait 2 seconds\r\n    }\r\n    // form\r\n  if (data.process_status === 'complete') {\r\n    return (\r\n      <div>\r\n        <h1 className={'mt-2'}> Просмотр документа {data.doc_src_name} </h1>\r\n        <hr/>\r\n        <Form method={\"GET\"}>\r\n          <ClassesSelect classes={props.classes} handleChange={null} type={data.doc_cls}/>\r\n          <Form.Group as={Row} controlId=\"exampleForm.ControlInput1\">\r\n            <Form.Label column sm=\"2\">Номер документа</Form.Label>\r\n            <Col sm=\"10\">\r\n              <Form.Control type=\"text\" name={'number'} placeholder=\"Номер документа\" value={data.number} />\r\n            </Col>\r\n          </Form.Group>\r\n          <Form.Group as={Row}  sm=\"5\" controlId=\"exampleForm.DateFrom\">\r\n\r\n            <Form.Label column sm=\"2\">Дата подписания</Form.Label>\r\n            <Col sm=\"10\">\r\n              <Form.Control type=\"date\"></Form.Control>\r\n            </Col>\r\n          </Form.Group>\r\n          <Form.Group as={Row} controlId=\"exampleForm.ControlInput2\">\r\n            <Form.Label column sm=\"2\">Выдавший орган</Form.Label>\r\n            <Col sm=\"10\">\r\n              <Form.Control type=\"text\" name={'organization'} placeholder=\"Выдавший орган\" value={data.organization} />\r\n            </Col>\r\n          </Form.Group>\r\n\r\n          <Button type={\"submit\"} variant=\"outline-success\">Сохранить изменения</Button>\r\n        </Form>\r\n        <hr/>\r\n        <iframe className={\"col-12\"} style={{'height': '800px'}} src={'http://178.154.225.145:5000/api/pdf/'+docId}/>\r\n      </div>\r\n    )\r\n  } else if (data.process_status === 'failed') {\r\n    return <h1>Произошла ошибка при обработке данных</h1>\r\n  } else {\r\n    return <h1>Обработка...</h1>\r\n  }\r\n\r\n}\r\n\r\nexport default View;","import React from 'react';\r\nimport {Link, useLocation} from \"react-router-dom\";\r\nimport {Button, Col, Form, FormControl, Nav, Navbar, NavDropdown, Row, Table} from \"react-bootstrap\";\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\nlet ResultTable = function (props) {\r\n  return (\r\n    <div>\r\n      <Row className={\"mt-5\"}>\r\n        <Col className={'col-10'}><h2>Результаты:</h2> </Col><Col className={'col-2'}><Button variant=\"outline-success\">Экспорт в Excell</Button></Col>\r\n      </Row>\r\n      <Table striped bordered hover size=\"sm\">\r\n        <thead>\r\n        <tr>\r\n          <th>id</th>\r\n          <th>Название</th>\r\n          <th>Класс</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        {props.result.map(function (val, i) {\r\n          return <tr>\r\n            <td><Link to={'/view/' + val.doc_id}>{val.doc_id}</Link></td>\r\n            <td><Link to={'/view/' + val.doc_id}>{val.doc_src_name}</Link></td>\r\n            <td><Link to={'/view/' + val.doc_id}>{val.doc_cls}</Link></td>\r\n          </tr>\r\n        })}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default ResultTable;","import React, {useState} from 'react';\r\nimport {useLocation} from \"react-router-dom\";\r\nimport {Button, Col, Form, FormControl, Nav, Navbar, NavDropdown, Row, Table} from \"react-bootstrap\";\r\nimport ResultTable from \"../Modules/ResultsTable\";\r\nimport APIRequest from \"../../rest\";\r\nimport ClassesSelect from \"../Modules/ClassesSelect\";\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\n\r\nlet Search = function (props) {\r\n    const [state, setState] = useState({}); // todo: get state from query\r\n    const [result, setResult] = useState(null);\r\n    const [classes, setClasses] = useState(null);\r\n    let handleChange = function(event) {\r\n      const target = event.target;\r\n      const name = target.name;\r\n      console.log(target);\r\n      if (name !== 'file') {\r\n        setState({\r\n          [name]: target.value\r\n        });\r\n      } else {\r\n        setState({\r\n          [name]: target.files[0]\r\n        });\r\n      }\r\n    }\r\n    let onSubmit = function(e) {\r\n      e.preventDefault();\r\n      APIRequest('search', state).then(function (result) {\r\n        console.log(result);\r\n        if (result.status === 'ok') {\r\n          setResult(result);\r\n        }\r\n      });\r\n\r\n    }\r\n\r\n    let query = useQuery();\r\n    return (\r\n      <div>\r\n        <h1 className={'mt-2'}> Поиск </h1>\r\n      <hr/>\r\n      <Form method={\"GET\"} onSubmit={onSubmit}>\r\n        <Form.Group as={Row} controlId=\"exampleForm.ControlInput1\">\r\n          <Form.Label column sm=\"2\">Текст</Form.Label>\r\n          <Col sm=\"10\">\r\n            <Form.Control onChange={handleChange} type=\"text\" name={'text'} placeholder=\"Документ содержит...\" value={query.get('text')} />\r\n          </Col>\r\n        </Form.Group>\r\n        <ClassesSelect classes={props.classes} handleChange={handleChange} type={query.get('doc_cls')}/>\r\n        {/*<Row>\r\n        <Form.Group  as={Col} column sm=\"5\" controlId=\"exampleForm.DateFrom\">\r\n\r\n          <Form.Label>Дата подписания от</Form.Label>\r\n            <Form.Control onChange={handleChange} name={'dateBegin'} type=\"date\"></Form.Control>\r\n\r\n        </Form.Group>\r\n          <Form.Group as={Col} column sm=\"5\" controlId=\"exampleForm.DateTo\">\r\n            <Form.Label>До</Form.Label>\r\n            <Form.Control  onChange={handleChange} name={'dateEnd'} type=\"date\"></Form.Control>\r\n          </Form.Group>\r\n        </Row>*/}\r\n\r\n        <Button type={\"submit\"} variant=\"outline-success\">Искать</Button>\r\n      </Form>\r\n        <hr/>\r\n        { (result != null) ? <ResultTable result={result}/> : null }\r\n      </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Search;","import React, { useState }  from 'react';\r\nimport {Button, Col, Form, FormControl, Nav, Navbar, NavDropdown, Row, Table} from \"react-bootstrap\";\r\nimport ResultTable from \"../Modules/ResultsTable\";\r\nimport {useParams, withRouter} from \"react-router-dom\";\r\nimport APIRequest from \"../../rest\";\r\n\r\n\r\nlet UploadResult = function (props) {\r\n  let { uploadId } = useParams();\r\n  const [data, setData] = useState({})\r\n  let intervalUpdate = function() {\r\n    APIRequest('upload/'+uploadId, {}, '', ).then(\r\n      function (result) {\r\n        setData(result);\r\n      }\r\n    )\r\n  }\r\n\r\n  if (data.process_status !== 'failed' && data.process_status !== 'complete') {\r\n    setTimeout(intervalUpdate, 2000);//wait 2 seconds\r\n  }\r\n\r\n  if (data.process_status === 'complete') {\r\n    return (\r\n      <div>\r\n        <ResultTable result={data.result}/>\r\n      </div>\r\n    )\r\n  } else if (data.process_status === 'failed') {\r\n    return <h1>Произошла ошибка при обработке данных</h1>\r\n  } else {\r\n    return <h1>Обработка...</h1>\r\n  }\r\n\r\n}\r\n\r\nexport default withRouter(UploadResult);","import React, {useState} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route, Redirect,\n} from 'react-router-dom';\n\nimport Header from '../Header';\n\nimport Footer from \"../Footer\";\nimport Upload from \"../Upload/Upload\";\nimport View from \"../View\";\nimport Search from \"../Search\";\nimport UploadResult from \"../Upload/UploadResult\";\nimport APIRequest from \"../../rest\";\n\nconst Main = () => {\n  const [classes, setClasses] = useState([]);\n  if (classes.length === 0) {\n    APIRequest('info/classes', []).then(\n      function (result) {\n        if (result.status === 'ok') {\n          let tmp = [];\n          delete result.status;\n          for (let cls in result) {\n            if (result.hasOwnProperty(cls)) {\n              tmp.push(result[cls]);\n            }\n          }\n          setClasses(tmp);\n        }\n      }\n    )\n  }\n  return (\n    <div className=\"Main container-md\">\n      <Router>\n        <Header/>\n        <Switch>\n          <Route exact path=\"/\">\n            {<Redirect to=\"/search\"/>}\n          </Route>\n          <Route exact path=\"/upload/\">\n            <Upload />\n          </Route>\n          <Route exact path=\"/upload/:uploadId\"  >\n          <UploadResult/>\n          </Route>\n          <Route exact path=\"/view/:docId\" children={<View classes={classes} />}/>\n          <Route path=\"/search\">\n            <Search classes={classes} />\n          </Route>\n          <Route exact path=\"/report\">\n            {/* todo */}\n          </Route>\n          <Route path=\"*\">\n            <h1>Not Found</h1>\n          </Route>\n        </Switch>\n        <Footer/>\n      </Router>\n    </div>\n  )\n};\n\nexport default Main;\n","import React from 'react';\nimport Main from './components/Main';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nconst App = () => (\n  <div className=\"App\">\n    <Main />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}